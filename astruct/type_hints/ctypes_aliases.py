# This file is generated by _gen_ctypes_info.py

from typing import Any, Union
import ctypes as C

SimpleCType = Union[C.c_bool, C.c_byte, C.c_char, C.c_char_p, C.c_double, C.c_float, C.c_int,
                    C.c_int16, C.c_int32, C.c_int64, C.c_int8, C.c_long, C.c_longdouble,
                    C.c_longlong, C.c_short, C.c_size_t, C.c_ssize_t, C.c_ubyte, C.c_uint,
                    C.c_uint16, C.c_uint32, C.c_uint64, C.c_uint8, C.c_ulong, C.c_ulonglong,
                    C.c_ushort, C.c_void_p, C.c_wchar, C.c_wchar_p, 'C.py_object[Any]']

IntCType = Union[C.c_byte, C.c_int, C.c_int16, C.c_int32, C.c_int64, C.c_int8, C.c_long,
                 C.c_longlong, C.c_short, C.c_size_t, C.c_ssize_t, C.c_ubyte, C.c_uint, C.c_uint16,
                 C.c_uint32, C.c_uint64, C.c_uint8, C.c_ulong, C.c_ulonglong, C.c_ushort]

FloatCType = Union[C.c_double, C.c_float, C.c_longdouble]

StrCType = Union[C.c_char, C.c_wchar]

PointerCType = Union[C.c_char_p, C.c_void_p, C.c_wchar_p, 'C.py_object[Any]']

AnyCType = Union[SimpleCType, C.Structure, C.Union, C.Array[Any]]

ALL_CTYPES: frozenset[type] = frozenset((  # type: ignore
    C.Structure,
    C.Union,  # type: ignore
    C.Array,  # type: ignore
    C.py_object,  # type: ignore
    C.c_bool, C.c_byte, C.c_char, C.c_char_p, C.c_double, C.c_float, C.c_int, C.c_int16, C.c_int32,
    C.c_int64, C.c_int8, C.c_long, C.c_longdouble, C.c_longlong, C.c_short, C.c_size_t,
    C.c_ssize_t, C.c_ubyte, C.c_uint, C.c_uint16, C.c_uint32, C.c_uint64, C.c_uint8,
    C.c_ulong, C.c_ulonglong, C.c_ushort, C.c_void_p, C.c_wchar, C.c_wchar_p
))


def is_builtin_ctype(t: type) -> bool:
    return t in ALL_CTYPES


def is_ctype_subclass(t: type) -> bool:
    if is_builtin_ctype(t):
        return True

    for supertype in t.mro():
        if is_builtin_ctype(supertype):
            return True

    return False
